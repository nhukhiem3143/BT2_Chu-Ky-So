from datetime import datetime
from pyhanko.sign import signers, fields
from pyhanko.stamp.text import TextStampStyle
from pyhanko.pdf_utils import images
from pyhanko.pdf_utils.text import TextBoxStyle
from pyhanko.pdf_utils.layout import SimpleBoxLayoutRule, AxisAlignment, Margins
from pyhanko.sign.general import load_cert_from_pemder
from pyhanko_certvalidator import ValidationContext
from pyhanko.pdf_utils.incremental_writer import IncrementalPdfFileWriter
from pyhanko.sign.fields import SigFieldSpec

# === ƒê∆Ø·ªúNG D·∫™N ===
PDF_IN = r"E:\Web-Security\ChuKySo\original.pdf"
PDF_OUT = r"E:\Web-Security\ChuKySo\signed.pdf"
KEY_FILE = r"E:\Web-Security\ChuKySo\keys\signer_key.pem"
CERT_FILE = r"E:\Web-Security\ChuKySo\keys\signer_cert.pem"
SIG_IMG = r"E:\Web-Security\ChuKySo\assets\ten.jpg"

# B∆∞·ªõc 1: Chu·∫©n b·ªã file PDF g·ªëc (original.pdf - n·ªôi dung b√†i t·∫≠p, kh√¥ng AcroForm)
print("B∆∞·ªõc 1: Chu·∫©n b·ªã PDF g·ªëc (original.pdf - n·ªôi dung b√†i t·∫≠p).")

# B∆∞·ªõc 2: T·∫°o Signature field (AcroForm), reserve v√πng /Contents (8192 bytes cho DER PKCS#7)
print("B∆∞·ªõc 2: T·∫°o SigField1, reserve /Contents ~8192 bytes.")

# B∆∞·ªõc 3: X√°c ƒë·ªãnh /ByteRange (lo·∫°i tr·ª´ v√πng /Contents kh·ªèi hash - t·ª± ƒë·ªông qua pyHanko)
print("B∆∞·ªõc 3: X√°c ƒë·ªãnh /ByteRange (v√πng hash tr·ª´ /Contents).")

# B∆∞·ªõc 4: T√≠nh hash (SHA-256) tr√™n v√πng ByteRange (md_algorithm='sha256')
print("B∆∞·ªõc 4: T√≠nh hash SHA-256 tr√™n ByteRange (md_algorithm='sha256').")

# B∆∞·ªõc 5: T·∫°o PKCS#7/CMS detached (include messageDigest/signingTime/contentType trong signedAttrs offset ~100 bytes; cert chain trong certificates sequence)
print("B∆∞·ªõc 5: T·∫°o PKCS#7 detached (messageDigest in signedAttrs, signingTime in signedAttrs, cert chain in certificates).")

# === T·∫†O SIGNER & VALIDATION CONTEXT (RSA 2048-bit, padding PKCS#1 v1.5 m·∫∑c ƒë·ªãnh) ===
signer = signers.SimpleSigner.load(KEY_FILE, CERT_FILE, key_passphrase=None)  # Key size 2048-bit t·ª´ gen_keys.py
vc = ValidationContext(trust_roots=[load_cert_from_pemder(CERT_FILE)])  # Cert chain t·ª´ vc

# B∆∞·ªõc 6: Ch√®n blob DER PKCS#7 v√†o /Contents (hex/binary) ƒë√∫ng offset (sau ByteRange)
print("B∆∞·ªõc 6: Ch√®n DER PKCS#7 v√†o /Contents offset (hex-encoded).")

# B∆∞·ªõc 7: Ghi incremental update (append revision m·ªõi v·ªõi SigDict + cross-ref table)
print("B∆∞·ªõc 7: Incremental update (append SigDict + cross-ref).")

# === M·ªû FILE G·ªêC ===
with open(PDF_IN, "rb") as inf:
    writer = IncrementalPdfFileWriter(inf)

    # üü¢ L·∫•y s·ªë trang cu·ªëi c√πng (fix t∆∞∆°ng th√≠ch v·ªõi pyHanko m·ªõi)
    try:
        pages = writer.root["/Pages"]
        if "/Count" in pages:
            num_pages = int(pages["/Count"])
        else:
            num_pages = len(pages["/Kids"])
    except Exception as e:
        print("‚ö†Ô∏è Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c s·ªë trang, m·∫∑c ƒë·ªãnh 1.")
        num_pages = 1

    target_page = num_pages - 1  

    fields.append_signature_field(
        writer,
        SigFieldSpec(
            sig_field_name="SigField1",
            box=(240, 50, 550, 150),
            on_page=target_page 
        )
    )

    # ·∫¢nh n·ªÅn (h√¨nh ch·ªØ k√Ω tay minh h·ªça)
    background_img = images.PdfImage(SIG_IMG)

    # Layout ·∫£nh & text (B∆∞·ªõc 5: signingTime t·ª´ datetime.now(), contentType data)
    bg_layout = SimpleBoxLayoutRule(
        x_align=AxisAlignment.ALIGN_MIN,  # ·∫£nh b√™n tr√°i
        y_align=AxisAlignment.ALIGN_MID,  # gi·ªØa
        margins=Margins(right=20)
    )

    text_layout = SimpleBoxLayoutRule(
        x_align=AxisAlignment.ALIGN_MIN,
        y_align=AxisAlignment.ALIGN_MID,
        margins=Margins(left=150)  # Kho·∫£ng c√°ch gi·ªØa ·∫£nh v√† ch·ªØ
    )

    # Style ch·ªØ
    text_style = TextBoxStyle(font_size=13)

    # N·ªôi dung ch·ªØ k√Ω (d√πng ti·∫øng Vi·ªát, ng√†y k√Ω hi·ªán t·∫°i)
    ngay_ky = datetime.now().strftime("%d/%m/%Y")
    stamp_text = (
        "Nguyen Nhu Khiem"
        "\nSDT: 0395167320"
        "\nMSV: K225480106030"
        f"\nNg√†y k√Ω: {ngay_ky}"
    )

    stamp_style = TextStampStyle(
        stamp_text=stamp_text,
        background=background_img,
        background_layout=bg_layout,
        inner_content_layout=text_layout,
        text_box_style=text_style,
        border_width=1,
        background_opacity=1.0,
    )

    # Metadata ch·ªØ k√Ω (B∆∞·ªõc 4-5: md_algorithm SHA-256)
    meta = signers.PdfSignatureMetadata(
        field_name="SigField1",
        reason="N·ªôp b√†i: Ch·ªØ k√Ω s·ªë PDF - 58KTP",
        location="Th√°i Nguy√™n, VN",
        md_algorithm="sha256",
    )

    # PdfSigner (B∆∞·ªõc 3-6: ByteRange/hash/PKCS#7 t·ª± ƒë·ªông; RSA padding PKCS#1 v1.5 t·ª´ signer)
    pdf_signer = signers.PdfSigner(
        signature_meta=meta,
        signer=signer,
        stamp_style=stamp_style,
    )

    # B∆∞·ªõc 6-7: K√Ω v√† l∆∞u (ch√®n /Contents hex, incremental append)
    with open(PDF_OUT, "wb") as outf:
        pdf_signer.sign_pdf(writer, output=outf)

# B∆∞·ªõc 8: (LTV) C·∫≠p nh·∫≠t DSS v·ªõi Certs/OCSPs/CRLs/VRI (t·ª´ vc, t·ª± ƒë·ªông n·∫øu c√≥ OCSP)
print("B∆∞·ªõc 8: LTV DSS - Append Certs/OCSP/CRLs/VRI (t·ª´ vc).")

print("‚úÖ ƒê√£ k√Ω PDF th√†nh c√¥ng! File l∆∞u t·∫°i:", PDF_OUT)
