from pyhanko.sign import validation
from pyhanko.sign.validation.status import SignatureStatus  # Import ƒë·ªÉ tham chi·∫øu n·∫øu c·∫ßn
from pyhanko.sign.diff_analysis import ModificationLevel
from pyhanko.pdf_utils.reader import PdfFileReader
from pyhanko.keys import load_cert_from_pemder
from pyhanko_certvalidator import ValidationContext
import hashlib, datetime, io, os
from datetime import timezone, timedelta

# === C·∫•u h√¨nh ƒë∆∞·ªùng d·∫´n ===
#PDF_PATH = "E:/Web-Security/ChuKySo/signed.pdf"  # File PDF c·∫ßn ki·ªÉm tra
PDF_PATH = "E:/Web-Security/ChuKySo/tampered.pdf"  # File PDF c·∫ßn ki·ªÉm tra
CERT_FILE = "E:/Web-Security/ChuKySo/keys/signer_cert.pem"
LOG_FILE = "E:/Web-Security/ChuKySo/scripts/verify_log.txt"
FIELD_NAME = "SigField1"

# === 1Ô∏è‚É£ T·∫°o ValidationContext tin c·∫≠y ===
vc = ValidationContext(trust_roots=[load_cert_from_pemder(CERT_FILE)])

# === 2Ô∏è‚É£ Chu·∫©n b·ªã log buffer ===
log = io.StringIO()
def log_print(msg):
    print(msg)
    log.write(msg + "\n")

log_print("=== KI·ªÇM TRA X√ÅC TH·ª∞C CH·ªÆ K√ù PDF ===")
log_print(f"Th·ªùi gian ki·ªÉm th·ª≠: {datetime.datetime.now()}")
log_print(f"File ki·ªÉm tra: {PDF_PATH}")
log_print("====================================")

# === 3Ô∏è‚É£ ƒê·ªçc file PDF ===
with open(PDF_PATH, "rb") as f:
    reader = PdfFileReader(f)
    embedded_sigs = reader.embedded_signatures

    if not embedded_sigs:
        log_print("‚ùå Kh√¥ng t√¨m th·∫•y ch·ªØ k√Ω n√†o trong file PDF.")
        exit()

    sig = embedded_sigs[0]
    sig_name = sig.field_name or FIELD_NAME
    log_print(f"üîç Ph√°t hi·ªán ch·ªØ k√Ω: {sig_name}")
    log_print("====================================")

    # === 4Ô∏è‚É£ ƒê·ªçc Signature dictionary (/Contents, /ByteRange) ===
    sig_dict = sig.sig_object
    contents = sig_dict.get('/Contents')
    byte_range = sig_dict.get('/ByteRange')

    log_print(f"/Contents: {len(contents)} bytes")
    log_print(f"/ByteRange: {byte_range}")

    # === 5Ô∏è‚É£ T√≠nh l·∫°i hash v√πng ByteRange ===
    f.seek(0)
    data = f.read()
    ranges = list(byte_range)
    signed_data = data[ranges[0]:ranges[0]+ranges[1]] + data[ranges[2]:ranges[2]+ranges[3]]
    digest = hashlib.sha256(signed_data).hexdigest()
    log_print(f"SHA256(ByteRange): {digest[:64]}... ‚úÖ")

    # === 6Ô∏è‚É£ X√°c th·ª±c ch·ªØ k√Ω ===
    status = validation.validate_pdf_signature(sig, vc)

    log_print("====================================")
    log_print("üîí K·∫æT QU·∫¢ X√ÅC TH·ª∞C CH·ªÆ K√ù:")
    log_print(status.pretty_print_details())

    # === 7Ô∏è‚É£ Th√¥ng tin ch·ª©ng th∆∞ (s·ª≠a: in fingerprint tr·ª±c ti·∫øp, kh√¥ng .hex()) ===
    signer_cert = status.signing_cert
    if signer_cert:
        subj = signer_cert.subject.human_friendly
        log_print("\nüìú Th√¥ng tin ch·ª©ng th∆∞ ng∆∞·ªùi k√Ω:")
        log_print(f"  Ch·ªß th·ªÉ (Subject): {subj}")
        # Ki·ªÉm tra n·∫øu fingerprint l√† bytes th√¨ .hex(), n·∫øu str th√¨ in tr·ª±c ti·∫øp
        sha1_fp = signer_cert.sha1_fingerprint.hex() if hasattr(signer_cert.sha1_fingerprint, 'hex') else signer_cert.sha1_fingerprint
        sha256_fp = signer_cert.sha256_fingerprint.hex() if hasattr(signer_cert.sha256_fingerprint, 'hex') else signer_cert.sha256_fingerprint
        log_print(f"  SHA1: {sha1_fp}")
        log_print(f"  SHA256: {sha256_fp}")
    else:
        log_print("‚ö†Ô∏è Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c ch·ª©ng th∆∞ c·ªßa ng∆∞·ªùi k√Ω.")

    # === 8Ô∏è‚É£ Th·ªùi gian k√Ω ===
    if status.signer_reported_dt:
        vn_tz = timezone(timedelta(hours=7))
        local_time = status.signer_reported_dt.astimezone(vn_tz) if status.signer_reported_dt else None
        log_print(f"\nüïí Th·ªùi gian k√Ω (VN): {local_time}")
    else:
        log_print("‚ö†Ô∏è Kh√¥ng c√≥ timestamp RFC3161.")

    # === 9Ô∏è‚É£ Ki·ªÉm tra s·ª≠a ƒë·ªïi ===
    mod_level = getattr(status, "modification_level", None)
    if mod_level == ModificationLevel.NONE:
        log_print("‚úÖ File ch∆∞a b·ªã ch·ªânh s·ª≠a k·ªÉ t·ª´ khi k√Ω.")
    elif mod_level == ModificationLevel.FORM_FILLING:
        log_print("‚ö†Ô∏è File c√≥ thay ƒë·ªïi nh·ªè (ƒëi·ªÅn form) sau khi k√Ω.")
    else:
        log_print("‚ùå File ƒë√£ b·ªã ch·ªânh s·ª≠a sau khi k√Ω!")

    log_print("====================================")

# === üîü T·ªïng k·∫øt (bottom_line l√† bool True n·∫øu h·ª£p l·ªá) ===
if status.bottom_line:
    log_print("‚úÖ Ch·ªØ k√Ω H·ª¢P L·ªÜ v√† t√†i li·ªáu NGUY√äN V·∫∏N.")
else:
    log_print("‚ùå Ch·ªØ k√Ω KH√îNG H·ª¢P L·ªÜ ho·∫∑c file b·ªã ch·ªânh s·ª≠a.")

# === üíæ Xu·∫•t log ===
with open(LOG_FILE, "w", encoding="utf-8") as out:
    out.write(log.getvalue())

log_print(f"\nüìÑ Log ƒë√£ ƒë∆∞·ª£c l∆∞u t·∫°i: {LOG_FILE}")
